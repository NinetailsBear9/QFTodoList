//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.TodoList
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;


    public enum UITodoListState {
        Create,
        Modify,
    }

    public class UITodoListData : QFramework.UIPanelData
    {
        public TodoList Model = new TodoList();

        public UITodoListState State = UITodoListState.Create;

        public TodoItem selectedItem = new TodoItem();
    }

    public enum UITodoListEvent
    {
        Start = QMgrID.UI,
        OnDataChanged,
        OnTodoitemSelected,
        End,
    }


    public class OnTodoItemSelectedMsg : QMsg
    {
        public TodoItem ItemData;

        public OnTodoItemSelectedMsg(TodoItem itemData) : base((int)UITodoListEvent.OnTodoitemSelected)
        {
            ItemData = itemData;
        }
    }

    public partial class UITodoList : QFramework.UIPanel
    {

       

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            if (eventId == (int)UITodoListEvent.OnDataChanged)
            {
                onDataChanged();
            }else
            if (eventId == (int)UITodoListEvent.OnTodoitemSelected){
                //AddNewTodo.text = "";
                var selectedMsg = msg as OnTodoItemSelectedMsg;

                Debug.Log(selectedMsg.ItemData.Content);

                AddNewTodo.text = selectedMsg.ItemData.Content;

                mData.State = UITodoListState.Modify;

                mData.selectedItem = selectedMsg.ItemData;
            }
            //throw new System.NotImplementedException ();
        }

        void onDataChanged()
        {
            Content.DestroyAllChild();

            mData.Model.mTodoitem.Where(item => item.Completed == false).ForEach(item =>
            {
                UITodoitem.Instantiate()
                      .Parent(Content)
                      .LocalIdentity()
                      .ApplySelfTo((self) => self.Init(item))
                      .Show();
            });
        }

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UITodoListData ?? new UITodoListData();
            // please add init code here
            //Text.text = mData.Model.mTodoitem.Count.ToString();

            //mData.Model.mTodoitem.ForEach(item =>
            //{
            //    UITodoitem.Instantiate()
            //              .Parent(Content)
            //              .LocalIdentity()
            //              .ApplySelfTo((self)=>self.Init(item))
            //              .Show();
            //});
            onDataChanged();

            RegisterEvent(UITodoListEvent.OnDataChanged);
            RegisterEvent(UITodoListEvent.OnTodoitemSelected);
        }
        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }

        protected override void RegisterUIEvent()
        {
            //base.RegisterUIEvent();
            AddNewTodo.onEndEdit.AddListener(content =>
            {
                if (Input.GetKey(KeyCode.Return))
                {
                    if (mData.State == UITodoListState.Modify)
                    {
                        mData.selectedItem.Content = content;
                        mData.State = UITodoListState.Create;
                        mData.selectedItem = null;
                    }
                    else
                    {
                        mData.Model.mTodoitem.Add(new TodoItem()
                        {
                            Completed = false,
                            Content = content
                        });
                    }
                    onDataChanged();

                    AddNewTodo.text = "";
                }
            });

            BtnHave.onClick.AddListener(()=> 
            {
                CloseSelf();
                UIMgr.OpenPanel<UICompletedList>(new UICompletedListData() {
                    Model = mData.Model
                });
            });


        }
    }
}
